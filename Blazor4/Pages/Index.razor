@page "/"
@using Blazor4.Model


<PageTitle>Index</PageTitle>

<h1>@Message</h1>


<div class="row">
    <div class="col-2 text-right">
        <b>On Focus: </b>
    </div>
    <div class="col-6">
        <input type="text" placeholder="On Focus"
               class="blazor-input"
               @onfocus="OnFocusCustomEvent" />
    </div>
</div>

<br />

<div class="row">
    <div class="col-2 text-right">
        <b>Mouse Events: </b>
    </div>
    <div class="col-6">
        <button @onclick="OnClickEvent"
                @ondblclick="OnDoubleClickEvent"
                @onmousedown="OnMouseDownEvent"
                @onmousemove="OnMouseDownEvent"
                @onmouseout="OnMouseOutEvent"
                @onmouseover="OnMouseOverEvent"
                @onmouseup="OnMouseUpEvent">
            Button Manual (Functions)
        </button>
        <br /> <br />
        <button @onclick="OnMouseEvent"
                @ondblclick="OnMouseEvent"
                @onmousedown="OnMouseEvent"
                @onmousemove="OnMouseEvent"
                @onmouseout="OnMouseEvent"
                @onmouseover="OnMouseEvent"
                @onmouseup="OnMouseEvent">
            Button OnMouseEvent (Switch)
        </button>
        <br /> <br />
        <button @onclick="@(e => ChangeMessageControl(e, 100))">
            Lambda Expression
        </button>
    </div>
</div>

<br />

<div class="row">
    <div class="col-2 text-right">
        <b>On Paste: </b>
    </div>
    <div class="col-6">
        <input type="text" placeholder="On Past"
               class="blazor-input"
               @onpaste="OnPastEvent" />
    </div>
</div>


<b>Digite aqui para alterar retirando o focus do input: </b>
<input type="text" @bind="pessoa.Name" />
@*Só altera quando tira o focus o bind (oneway)*@
<br />

<b>Digite aqui o email para alterar inputando os dados</b>
<input type="text" @bind-value="pessoa.Email" @bind-value:event="oninput" />
@*Só altera quando tira o focus o bind (twoway)*@
<br />

<button @onclick="RetornoDosValores">Retornar os valores digitados!</button>

<br />
<br />
<b>@Nome</b>
<br />
<br />
<b>@Email</b>



<br />
<br />

<h1>File Upload</h1>

<br />
<br />
<div class="drag-drop-zone">
    <BlazorFileUploader.InputFile OnChange="HandleFileSelected"></BlazorFileUploader.InputFile>
    @statusUpload
    <br />

</div>

@if (!String.IsNullOrEmpty(imageBase64))
{
    <img style="width: 300px; height:auto" src="data:image;base64,@imageBase64" />
}


@code {

    #nullable disable

    private Pessoa pessoa = new Pessoa();

    protected void RetornoDosValores()
    {
        this.Nome = pessoa.Name;
        this.Email = pessoa.Email;
    }


    public string Message { get; set; } = "";

    public string Nome { get; set; } = "";

    public string Email { get; set; } = "";

    string statusUpload = "Arraste um arquivo para realizar o upload!";

    protected void OnFocusCustomEvent()
    {
        this.Message = "Focus no campo de texto";
    }

    protected void OnPastEvent()
    {
        this.Message = "Colou elemento!";
    }
    protected void OnClickEvent()
    {
        this.Message = "On Click Event";
    }
    protected void OnDoubleClickEvent()
    {
        this.Message = "Double Click Event";
    }
    protected void OnMouseDownEvent()
    {
        this.Message = "On Mouse Down Event";
    }
    protected void OnMouseOutEvent()
    {
        this.Message = "On Mouse Out Event";
    }
    protected void OnMouseOverEvent()
    {
        this.Message = "On Mouse Over Event";
    }

    protected void OnMouseUpEvent()
    {
        this.Message = "On Mouse Up Event";
    }

    protected void OnMouseEvent(MouseEventArgs e)
    {
        switch (e.Type)
        {
            case "click":
                this.Message = "On Click Event";
                break;
            case "mouseout":
                this.Message = "On Mouse Out";
                break;
        }
    }

    protected void ChangeMessageControl(MouseEventArgs e, int elementId)
    {
        this.Message = $"Element number {elementId}";
    }


    IFileListEntry file;
    string imageBase64;

    async Task HandleFileSelected(IFileListEntry[] files)
    {


        foreach (var singleFile in files)
        {
            file = singleFile;
            await GetBase64File();
            StateHasChanged();
        }


    }

    async Task GetBase64File()
    {
        byte[] bytes;
        var memoryStream = await file.ReadAllAsync();
        bytes = memoryStream.ToArray();
        imageBase64 = Convert.ToBase64String(bytes);
        statusUpload = "Upload feito com sucesso";
    }


}
